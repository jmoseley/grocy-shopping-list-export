/**
 * grocy REST API
 * Authentication is done via API keys (header *GROCY-API-KEY* or same named query parameter), which you can manage [here](https://demo.grocy.info/manageapikeys).<br>Additionally requests from within the frontend are also valid (via session cookie).
 *
 * The version of the OpenAPI document: 2.6.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require("request");
import http = require("http");

/* tslint:disable:no-unused-locals */
import { Battery } from "../model/battery";
import { Chore } from "../model/chore";
import { ExposedEntity } from "../model/exposedEntity";
import { ExposedEntityButNoListing } from "../model/exposedEntityButNoListing";
import { GenericErrorResponse } from "../model/genericErrorResponse";
import { InlineResponse2001 } from "../model/inlineResponse2001";
import { Location } from "../model/location";
import { Product } from "../model/product";
import { QuantityUnit } from "../model/quantityUnit";
import { ShoppingListItem } from "../model/shoppingListItem";
import { StockEntry } from "../model/stockEntry";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "http://grocy.lan/api";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum GenericEntityInteractionsApiApiKeys {
  ApiKeyAuth
}

export class GenericEntityInteractionsApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    ApiKeyAuth: new ApiKeyAuth("header", "GROCY-API-KEY")
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: GenericEntityInteractionsApiApiKeys, value: string) {
    (this.authentications as any)[
      GenericEntityInteractionsApiApiKeys[key]
    ].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @summary Returns all objects of the given entity
   * @param entity A valid entity name
   */
  public async objectsEntityGet(
    entity: ExposedEntityButNoListing,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<
      | Product
      | Chore
      | Battery
      | Location
      | QuantityUnit
      | ShoppingListItem
      | StockEntry
    >;
  }> {
    const localVarPath =
      this.basePath +
      "/objects/{entity}".replace(
        "{" + "entity" + "}",
        encodeURIComponent(String(entity))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'entity' is not null or undefined
    if (entity === null || entity === undefined) {
      throw new Error(
        "Required parameter entity was null or undefined when calling objectsEntityGet."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.ApiKeyAuth.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<
          | Product
          | Chore
          | Battery
          | Location
          | QuantityUnit
          | ShoppingListItem
          | StockEntry
        >;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            body = ObjectSerializer.deserialize(
              body,
              "Array<Product | Chore | Battery | Location | QuantityUnit | ShoppingListItem | StockEntry>"
            );
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Deletes a single object of the given entity
   * @param entity A valid entity name
   * @param objectId A valid object id of the given entity
   */
  public async objectsEntityObjectIdDelete(
    entity: ExposedEntity,
    objectId: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      "/objects/{entity}/{objectId}"
        .replace("{" + "entity" + "}", encodeURIComponent(String(entity)))
        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'entity' is not null or undefined
    if (entity === null || entity === undefined) {
      throw new Error(
        "Required parameter entity was null or undefined when calling objectsEntityObjectIdDelete."
      );
    }

    // verify required parameter 'objectId' is not null or undefined
    if (objectId === null || objectId === undefined) {
      throw new Error(
        "Required parameter objectId was null or undefined when calling objectsEntityObjectIdDelete."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "DELETE",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.ApiKeyAuth.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Returns a single object of the given entity
   * @param entity A valid entity name
   * @param objectId A valid object id of the given entity
   */
  public async objectsEntityObjectIdGet(
    entity: ExposedEntityButNoListing,
    objectId: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body:
      | Product
      | Chore
      | Battery
      | Location
      | QuantityUnit
      | ShoppingListItem
      | StockEntry;
  }> {
    const localVarPath =
      this.basePath +
      "/objects/{entity}/{objectId}"
        .replace("{" + "entity" + "}", encodeURIComponent(String(entity)))
        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'entity' is not null or undefined
    if (entity === null || entity === undefined) {
      throw new Error(
        "Required parameter entity was null or undefined when calling objectsEntityObjectIdGet."
      );
    }

    // verify required parameter 'objectId' is not null or undefined
    if (objectId === null || objectId === undefined) {
      throw new Error(
        "Required parameter objectId was null or undefined when calling objectsEntityObjectIdGet."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.ApiKeyAuth.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body:
          | Product
          | Chore
          | Battery
          | Location
          | QuantityUnit
          | ShoppingListItem
          | StockEntry;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            body = ObjectSerializer.deserialize(
              body,
              "Product | Chore | Battery | Location | QuantityUnit | ShoppingListItem | StockEntry"
            );
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Edits the given object of the given entity
   * @param entity A valid entity name
   * @param objectId A valid object id of the given entity
   * @param productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry A valid entity object of the entity specified in parameter *entity*
   */
  public async objectsEntityObjectIdPut(
    entity: ExposedEntity,
    objectId: number,
    productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry:
      | Product
      | Chore
      | Battery
      | Location
      | QuantityUnit
      | ShoppingListItem
      | StockEntry,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      "/objects/{entity}/{objectId}"
        .replace("{" + "entity" + "}", encodeURIComponent(String(entity)))
        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'entity' is not null or undefined
    if (entity === null || entity === undefined) {
      throw new Error(
        "Required parameter entity was null or undefined when calling objectsEntityObjectIdPut."
      );
    }

    // verify required parameter 'objectId' is not null or undefined
    if (objectId === null || objectId === undefined) {
      throw new Error(
        "Required parameter objectId was null or undefined when calling objectsEntityObjectIdPut."
      );
    }

    // verify required parameter 'productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry' is not null or undefined
    if (
      productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry ===
        null ||
      productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry ===
        undefined
    ) {
      throw new Error(
        "Required parameter productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry was null or undefined when calling objectsEntityObjectIdPut."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PUT",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry,
        "Product | Chore | Battery | Location | QuantityUnit | ShoppingListItem | StockEntry"
      )
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.ApiKeyAuth.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Adds a single object of the given entity
   * @param entity A valid entity name
   * @param productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry A valid entity object of the entity specified in parameter *entity*
   */
  public async objectsEntityPost(
    entity: ExposedEntity,
    productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry:
      | Product
      | Chore
      | Battery
      | Location
      | QuantityUnit
      | ShoppingListItem
      | StockEntry,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: InlineResponse2001 }> {
    const localVarPath =
      this.basePath +
      "/objects/{entity}".replace(
        "{" + "entity" + "}",
        encodeURIComponent(String(entity))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'entity' is not null or undefined
    if (entity === null || entity === undefined) {
      throw new Error(
        "Required parameter entity was null or undefined when calling objectsEntityPost."
      );
    }

    // verify required parameter 'productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry' is not null or undefined
    if (
      productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry ===
        null ||
      productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry ===
        undefined
    ) {
      throw new Error(
        "Required parameter productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry was null or undefined when calling objectsEntityPost."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        productChoreBatteryLocationQuantityUnitShoppingListItemStockEntry,
        "Product | Chore | Battery | Location | QuantityUnit | ShoppingListItem | StockEntry"
      )
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.ApiKeyAuth.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: InlineResponse2001;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            body = ObjectSerializer.deserialize(body, "InlineResponse2001");
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Returns all objects of the given entity where the field \"name\" contains the search string (so only works for entities which have that field)
   * @param entity A valid entity name
   * @param searchString The search string
   */
  public async objectsEntitySearchSearchStringGet(
    entity: ExposedEntity,
    searchString: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<
      | Product
      | Chore
      | Battery
      | Location
      | QuantityUnit
      | ShoppingListItem
      | StockEntry
    >;
  }> {
    const localVarPath =
      this.basePath +
      "/objects/{entity}/search/{searchString}"
        .replace("{" + "entity" + "}", encodeURIComponent(String(entity)))
        .replace(
          "{" + "searchString" + "}",
          encodeURIComponent(String(searchString))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'entity' is not null or undefined
    if (entity === null || entity === undefined) {
      throw new Error(
        "Required parameter entity was null or undefined when calling objectsEntitySearchSearchStringGet."
      );
    }

    // verify required parameter 'searchString' is not null or undefined
    if (searchString === null || searchString === undefined) {
      throw new Error(
        "Required parameter searchString was null or undefined when calling objectsEntitySearchSearchStringGet."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.ApiKeyAuth.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<
          | Product
          | Chore
          | Battery
          | Location
          | QuantityUnit
          | ShoppingListItem
          | StockEntry
        >;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            body = ObjectSerializer.deserialize(
              body,
              "Array<Product | Chore | Battery | Location | QuantityUnit | ShoppingListItem | StockEntry>"
            );
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Returns all userfields with their values of the given object of the given entity
   * @param entity A valid entity name
   * @param objectId A valid object id of the given entity
   */
  public async userfieldsEntityObjectIdGet(
    entity: ExposedEntity,
    objectId: number,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: object }> {
    const localVarPath =
      this.basePath +
      "/userfields/{entity}/{objectId}"
        .replace("{" + "entity" + "}", encodeURIComponent(String(entity)))
        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'entity' is not null or undefined
    if (entity === null || entity === undefined) {
      throw new Error(
        "Required parameter entity was null or undefined when calling userfieldsEntityObjectIdGet."
      );
    }

    // verify required parameter 'objectId' is not null or undefined
    if (objectId === null || objectId === undefined) {
      throw new Error(
        "Required parameter objectId was null or undefined when calling userfieldsEntityObjectIdGet."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.ApiKeyAuth.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: object }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, "object");
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Edits the given userfields of the given object of the given entity
   * @param entity A valid entity name
   * @param objectId A valid object id of the given entity
   * @param body A valid entity object of the entity specified in parameter *entity*
   */
  public async userfieldsEntityObjectIdPut(
    entity: ExposedEntity,
    objectId: number,
    body: object,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      "/userfields/{entity}/{objectId}"
        .replace("{" + "entity" + "}", encodeURIComponent(String(entity)))
        .replace("{" + "objectId" + "}", encodeURIComponent(String(objectId)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'entity' is not null or undefined
    if (entity === null || entity === undefined) {
      throw new Error(
        "Required parameter entity was null or undefined when calling userfieldsEntityObjectIdPut."
      );
    }

    // verify required parameter 'objectId' is not null or undefined
    if (objectId === null || objectId === undefined) {
      throw new Error(
        "Required parameter objectId was null or undefined when calling userfieldsEntityObjectIdPut."
      );
    }

    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling userfieldsEntityObjectIdPut."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PUT",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(body, "object")
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.ApiKeyAuth.apiKey) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
}
